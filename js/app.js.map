{"version":3,"sources":["lightbox.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * Created by ben on 01/01/2017.\n */\n\nconsole.log(\"Lightbox working\");\n\nvar Thumbnail = function (element) {\n    this.element = element;\n    this.src = this.getImageSrc();\n    this.dataID = this.getDataId();\n    this.imageData = this.getImageData();\n    this.assignClickFunctions();\n};\n\nThumbnail.prototype.getImageSrc = function () {\n    return this.element.getElementsByTagName('img')[0].src;\n};\n\nThumbnail.prototype.getDataId = function () {\n    return this.element.getElementsByTagName('a')[0].dataset.revealId;\n};\n\nThumbnail.prototype.getImageData = function () {\n    // Setup object to contain image data\n    var imageData = {\n        container: \"\",\n        src: \"\",\n        srcset: \"\",\n        alt: \"\"\n    };\n    if (document.getElementById(this.dataID)) {\n        var imageContainer = document.getElementById(this.dataID);\n        imageData.container = imageContainer;\n    } else {\n        console.log(\"Error: No element with an id of \" + this.dataID + \" found\");\n        return null;\n    }\n    if (imageContainer.getElementsByClassName(\"photodata\").length > 0) {\n        var imageElements = imageContainer.getElementsByClassName(\"photodata\");\n    } else {\n        console.log(\"Error: Element \" + this.dataID + \" does not contain a div with a class of photodata\");\n        return null;\n    }\n    if (imageElements[0].hasAttribute(\"data-src\")) {\n        var imageSrc = imageElements[0].dataset.src;\n        imageData.src = imageSrc;\n    } else {\n        console.log(\"Error: photodata class does not contain an imgs dataset\");\n        return null;\n    }\n    if (imageElements[0].hasAttribute(\"data-srcset\")) {\n        var imageSrcset = imageElements[0].dataset.srcset;\n        imageData.srcset = imageSrcset;\n    }\n    if (imageElements[0].hasAttribute(\"data-alt\")) {\n        var imageAlt = imageElements[0].dataset.alt;\n        imageData.alt = imageAlt;\n    }\n    return imageData;\n};\n\nThumbnail.prototype.assignClickFunctions = function () {\n    this.addSelectListener(this.element, \"click\", this.showLightbox);\n};\n\nThumbnail.prototype.addSelectListener = function (element, type, func) {\n    element.addEventListener(type, func.bind(this));\n};\n\nThumbnail.prototype.showLightbox = function () {\n    if (this.imageData.container) {\n        var lightboxContainer = this.imageData.container;\n        var photobox = lightboxContainer.getElementsByClassName(\"photoBox\")[0];\n        var img = \"<img src=\\\"\" + this.imageData.src + \"\\\">\";\n        var revealModalBg = document.getElementById(\"reveal-modal-overlay\");\n        var closeButton = lightboxContainer.getElementsByClassName(\"close-reveal-modal\")[0];\n        this.addSelectListener(closeButton, \"click\", this.hideLightbox);\n        revealModalBg.style.display = \"block\";\n        lightboxContainer.style.display = \"block\";\n        photobox.innerHTML = img;\n        console.log(lightboxContainer.getElementsByClassName(\"close-reveal-modal\")[0])\n    }\n};\n\nThumbnail.prototype.hideLightbox = function (evt) {\n    evt.preventDefault();\n    var lightboxContainer = this.imageData.container;\n    var revealModalBg = document.getElementById(\"reveal-modal-overlay\");\n    revealModalBg.style.display = \"none\";\n    lightboxContainer.style.display = \"none\";\n};\n\nvar thumbnailsCollection = [];\nvar thumbnails = document.getElementsByClassName(\"image\");\n\nfor (var i = 0; i < thumbnails.length; i++) {\n    thumbnailsCollection.push(new Thumbnail(thumbnails[i]));\n}"]}